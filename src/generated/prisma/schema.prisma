// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  email     String     @unique
  role      Role       @default(CONTRIBUTOR)
  createdAt DateTime   @default(now())
  password  String?
  // Relations
  disasters Disaster[] @relation("UserDisasters")
  reports   Report[]
}

enum Role {
  ADMIN
  CONTRIBUTOR
}

model Disaster {
  id           String     @id @default(cuid())
  title        String
  locationName String
  latitude     Float
  longitude    Float
  description  String
  tags         String[] // Postgres supports array of TEXT
  ownerId      String
  owner        User       @relation("UserDisasters", fields: [ownerId], references: [id])
  createdAt    DateTime   @default(now())
  auditTrail   Json?      @default("{}")
  reports      Report[]
  resources    Resource[]
}

enum verificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Report {
  id                 String             @id @default(cuid())
  disasterId         String
  disaster           Disaster           @relation(fields: [disasterId], references: [id])
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  content            String
  imageUrl           String
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  metadata           Json?              @default("{}")
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Resource {
  id           String   @id @default(cuid())
  disasterId   String
  disaster     Disaster @relation(fields: [disasterId], references: [id])
  name         String
  locationName String
  latitude     Float
  longitude    Float
  type         String // e.g. shelter, hospital
  createdAt    DateTime @default(now())
}

model Cache {
  key           String    @id
  value         Json
  expires_at    DateTime  @map("expiresAt")
  created_at    DateTime  @default(now()) @map("createdAt")
  updated_at    DateTime  @updatedAt @map("updatedAt")
  access_count  Int       @default(1) @map("accessCount")
  last_accessed DateTime? @map("lastAccessed")
  tags          String[]  @default([])
  metadata      Json?     @default("{}")

  @@index([expires_at])
  @@index([tags])
  @@index([access_count(sort: Desc)])
  @@index([created_at(sort: Desc)])
  @@map("cache")
}
